generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Message {
//   id Int @id @default(autoincrement())
//  content String
// }

model Customer {
  id Int @id @default(autoincrement())
  firstName String?
  lastName String?
  phone String
  email String @unique
  password String
  streetAddress1 String?
  streetAddress2 String?
  city String?
  state String?
  zipcode Int?
  vehicles Vehicle[]
  quotes Quote[]
  appointments Appointment[]
}

model Mechanic {
  id Int @id @default(autoincrement())
  firstName String
  lastName String
  phone String
  email String? @unique
  password String?
  streetAddress1 String?
  streetAddress2 String?
  city String?
  state String?
  zipcode Int?
  appointments Appointment[]
}

model Vehicle {
  id Int @id @default(autoincrement())
  customer Customer @relation(fields: [customerID], references: [id])
  customerID Int
  vin String
  vehicleType String
  year Int
  make String
  model String
  imgUrl String?
  quotes Quote[]
}

model Quote {
  id Int @id @default(autoincrement())
  transaction Transaction?
  customer Customer @relation(fields: [customerID], references: [id])
  customerID Int
  vehicle Vehicle @relation(fields: [vehicleID], references: [id])
  vehicleID Int
  status String? //status: [expired, active]
  services Service[]
  jobs Job[]
  createdAt DateTime @default(now())
  costEstimate Float?
  description String?
  appointment Appointment?
}

model Transaction {
  id Int @id @default(autoincrement())
  quote Quote @relation(fields: [quoteID], references: [id])
  quoteID Int
  cost Float
  dateTime DateTime
}

model Appointment {
  id Int @id @default(autoincrement())
  status String //status: [ pending, approved, canceled, completed]
  customer Customer @relation(fields: [customerID], references: [id])
  customerID Int
  scheduleDate String //DateTime
  quote Quote @relation(fields: [quoteID], references: [id])
  quoteID Int
  mechanic Mechanic? @relation(fields: [mechanicID], references: [id])
  mechanicID Int?
  address String
}

//include basic labor fee
model Service {
  id Int @id @default(autoincrement())
  price Float? //some services' labor fee determined by labor time
  type String //the display name of service
  laborTime Float? //unit: hour, some services have a flat rate
  parts Part[] //part options
  quotes Quote[]
  jobs Job[]
}

model Part {
  id Int @id @default(autoincrement())
  price Float //average part price
  type String //the display name of part
  services Service[]
  jobs Job[]
}

//the work that is actually done, including service name and parts used
model Job {
  id Int @id @default(autoincrement())
  service Service @relation(fields: [serviceID], references: [id])
  serviceID Int
  parts Part[]
  laborPrice Float //could be edited by Client
  partPrice Float //total part price, could be edited by Client
  quotes Quote[]
}




